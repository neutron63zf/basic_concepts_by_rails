id: basic_concept_by_rails
# railsで学ぶウェブアプリケーションの基礎概念

## 概要

ウェブアプリケーションを作る上で必須の知識のうち、サーバーサイドプログラミングの基本的な概念を学ぶ

### やること

* ルーティング、レンダリングといった、アクセスされたときの実際の挙動
* モデルやデータベースのマイグレーションなどの概念と手順
* (簡易的な)モデル設計
* モデル同士のアソシエーション

### やらないこと

* Railsの詳細を知らないと実装できないこと
* CSSコーディングの技法
* デザイン方法論
* jQueryなどのライブラリー
* Vue,React,Angular,Elm,HyperAppなどのフレームワーク

### 必要な環境

* Ruby 2.5.1
* Mysql 5.7
* Rails 5.2

講習会では、これに加えてGit,anyenv,rbenv,Google Chrome,Visual Studio Codeをインストールしたものを仮想マシンとして配布しています。
また、Mysqlのrootユーザーにパスワードなしで入れるように設定もしてあります。

## ページが表示されるまで

サーバーサイドプログラミングの前に、ウェブページの基本的なフローを改めて見た上で、「サーバーサイド」とはどれくらいなのかを確認します。

### ウェブサービスの概要

![ウェブサービスの概要](./webservices.png)

現在のウェブサービスの殆どは「クライアント - サーバーシステム」というシステムに当てはまります。
つまり、ブラウザなどのクライアントがインターネットを介してサーバーと通信するというシステムです。

より具体的には

1. a
1. b

Positive
: 「殆ど」と言ったように、中にはサーバーを介さずに直接クライアント同士が繋がっている、なんていうシステムも存在します。

## レスポンスを送るまで

## 作りたいもの

## モデルを考える

## モデルを実装する

## データを入れてみる

## データを表示してみる

## データを更新してみる


### セットアップと要件

```bash
rails g model user name:string
rails g model room name:string
rails g model post content:string room_id:integer user_id:integer

# post,room,userのマイグレーションコードとmodelコードを見せる

rake db:migrate

# 以上でモデルおしまい

# seedのコードを見せる

rails db:seed

# 以上でデータおしまい...?

# いよいよ表示！

rails controller users index show
```

## additionalな課題

2週間以内に書いてきたら2週間以内にコードレビューするよん

- 退出できるようにしてみよう
- 部屋を作れるようにしてみよう
- 部屋に参加できるようにしてみよう
- サインインができるようにしてみよう
- ログイン、ログアウトができるようにしてみよう
- その他機能追加
